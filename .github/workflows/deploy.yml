name: Build, Push and Deploy
env:
IMAGE_NAME: ${{ github.repository_owner }}/${{ github.repository }}


jobs:
build-and-push:
runs-on: ubuntu-latest
steps:
- name: Checkout
uses: actions/checkout@v4


- name: Set up QEMU
uses: docker/setup-qemu-action@v3


- name: Set up Docker Buildx
uses: docker/setup-buildx-action@v3


- name: Login to registry
uses: docker/login-action@v2
with:
registry: ${{ secrets.REGISTRY_HOST }} # e.g. ghcr.io or docker.io
username: ${{ secrets.REGISTRY_USERNAME }}
password: ${{ secrets.REGISTRY_PASSWORD }}


- name: Build and push
uses: docker/build-push-action@v4
with:
context: .
push: true
tags: |
${{ secrets.REGISTRY_HOST }}/${{ github.repository }}:latest


deploy:
needs: build-and-push
runs-on: ubuntu-latest
steps:
- name: Deploy via SSH
uses: appleboy/ssh-action@v0.1.8
with:
host: ${{ secrets.SSH_HOST }}
username: ${{ secrets.SSH_USER }}
key: ${{ secrets.SSH_PRIVATE_KEY }}
port: ${{ secrets.SSH_PORT || 22 }}
script: |
set -e
IMAGE=${{ secrets.REGISTRY_HOST }}/${{ github.repository }}:latest


# stop and remove existing container if present
if docker ps -a --format '{{.Names}}' | grep -q '^node_basic_app$'; then
docker rm -f node_basic_app || true
fi


# create env file on remote machine from secrets
cat > ~/node_app.env <<'EOF'
SECRET_MESSAGE=${{ secrets.ENV_SECRET_MESSAGE }}
USERNAME=${{ secrets.ENV_USERNAME }}
PASSWORD=${{ secrets.ENV_PASSWORD }}
PORT=3000
EOF


# pull new image and run
docker pull "$IMAGE"
docker run -d --env-file ~/node_app.env -p 80:3000 --restart always --name node_basic_app "$IMAGE"
